2024-04-17 React 6주차 강의 내용
7.1 훅이란 무엇인가?
클래스형 컴포넌트에서는 생성자에서 state를 정의하고, setState()함수를 통해 state를 업데이트.
예전에 사용하던 함수형 컴포넌트는 별도로 state를 정의하거나, 컴포넌트의 생명주기에 맞춰서 어떤 코드가 실행되도록 할 수 없었음.
함수형 컴포넌트에서도 state나 생명주기 함수의 기능을 사용하게 해주기 위해 추가된 기능이 바로 훅(Hook)
함수형 컴포넌트도 훅을 사용하여 클래스형 컴포넌트의 기능을 모두 동일하게 구현할 수 있게 됨.
Hook이란 'state와 생명주기 기능에 갈고리를 걸어 원하는 시점에 정해진 함수를 실행되도록 만든 함수'를 의미함.
훅의 이름은 모두 'use'로 시작함.
사용자 정의 훅을 만들 수 있으며, 이 경우에 이름은 자유롭게 할 수 있으나 'use'로 시작할 것을 권장함.
7.2 useState
useState는 함수형 컴포넌트에서 state를 사용하기 위한 Hook임.
다음 예제는 버튼을 클릭할 때마다 카운트가 증가하는 함수형 컴포넌트.
증가는 시킬 수 있지만 증가할 때마다 재 렌더링은 일어나지 않음.
이럴 때 state를 사용해야하지만 함수형에는 없기때문에 useState()를 사용함.
useState()
useEffect
useState와 함께 가장 많이 사용하는 Hook
이 함수는 사이드 이펙트를 수행하기 위한 것.
영어로 side effect는 부작용을 의미함. 일반적으로 프로그래밍에서 사이트 이펙트는 '개발자가 의도하지 않은 코드가 실행되면서 버그가 발생하는 것'을 말함.
하지만 리액트에서는 효과 또는 영향을 뜻하는 effect의 의미에 가까움.
예를 들면 서버에서 데이터를 받아오거나 수동으로 DOM을 변경하는 등의 작업을 의미함.
이 작업을 이펙트라고 부르는 이유는 이 작업들이 다른 컴포넌트에 영향을 미칠 수 있으며, 렌더링중에는 작업이 완료될 수 없기 때문, 렌더링이 끝난 이후에 실행되어야 하는 작업들임.
클래스 컴포넌트의 생명주기 함수와 같은 기능을 하나로 통합한 기능을 제공함.
저자는 useEffect가 side effect가 아니라 effect에 가깝다고 설명하고 있지만, 이것은 부작용의 의미를 잘못 해석해서 생긴 오해임. 부작용의 부를 不로 생각했기 때문.
결국 sideEffect는 렌더링 외에 실행해야하는 부수적인 코드를 말함.
예를 들면 네트워크 리퀘스트, DOM 수동 조작, 로깅 등은 정리(clean-up)가 필요 없는 경우들.
useEffect()함수는 다음과 같이 사용함.
첫 번째 파라미터는 이펙트 함수가 들어가고, 두 번째 파라미터로는 의존성 배열이 들어감.
의존성 배열은 이펙트가 의존하고 있는 배열로, 배열 안에 있는 변수 중에 하나라도 값이 변경되었을때 이펙트 함수가 실행됨.
이펙트 함수는 처음 컴포넌트가 렌더링 된 이후, 그리고 재 렌더링 이후에 실행됨.
만약 이펙트 함수가 마운트와 언마운트 될때만 한 번씩 실행되게 하고 싶으면 빈 배열을 넣으면 됨. 이 경우 props나state에 있는 어떤 값에도 의존하지 않기 떄문에 여러 번 실행되지 않음.
의존성 배열을 생략하는 경우는 업데이트될 때마다 호출.
7.4 useMemo
useMemo() 훅은 Memoizde value를 리턴하는 훅.
이전 계산값을 갖고 있기 때문에 연산량이 많은 작업의 반복을 피할 수 있음.
이 훅은 렌더링이 일어나는 동안 실행됨.
따라서 렌더링이 일어나는 동안 실행돼서는 안될 작업을 넣으면 안됨.
예를 들면 useEffect에서 실행되어야 할 사이드 이펙트 같은것.
다음 코드와 같이 의존성 배열을 넣지 않을 경우, 렌더링이 일어날 때마다 매번 함수가 실행됨.
따라서 의존성 배열을 넣지 않는 것은 의미가 없음.
만약 빈 배열을 넣게 되면 컴포넌트 마운트 시에만 함수가 실행됨.
7.5 useCallback
useCallback() 혹은 useMemo()와 유사한 역할을 함.
차이점은 값이 아닌 함수를 반환한다는 점.
의존성 배열을 파라미터로 받는 것은 useMemo와 동일.
파라미터로 받은 함수를 콜백이라고 부름.
useMemo와 마찬가지로 의존성 배열 중 하나라도 변경되면 콜백 함수를 반환함.
7.6 useRef
useRef() 훅은 레퍼런스를 사용하기 위한 훅.
레퍼런스란 특정 컴포넌트에 접근할 수 있는 객체를 의미함.
useRef()훅은 바로 이 레퍼런스 객체를 반환함.
레퍼넌스 객체에는 .current라는 속성이 있는데, 이것은 현재 참조하고 있는 엘리먼트를 의미함.
이렇게 반환된 레퍼런스 객체는 컴포넌트의 라이프타임 전체에 걸쳐서 유지됨.
즉, 컴포넌트가 마운트 해제 전까지는 계속 유지된다는 의미.
7.7 훅의 규칙
첫 번째 규칙은 무조건 최상의 레벨에서만 호출해야 한다는 것. 여기서 최상위는 컴포넌트의 최상위 레벨을 의미함.